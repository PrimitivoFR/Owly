// GO: protoc protofiles/chatroom.proto --go_out=plugins=grpc:./server/
// TS: protoc --ts_out="service=grpc-web:owly-client/src" protofiles/chatroom.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.6.1
// source: protofiles/chatroom.proto

package chatroompb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Chatroom struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id   string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *Chatroom) Reset() {
	*x = Chatroom{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protofiles_chatroom_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chatroom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chatroom) ProtoMessage() {}

func (x *Chatroom) ProtoReflect() protoreflect.Message {
	mi := &file_protofiles_chatroom_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chatroom.ProtoReflect.Descriptor instead.
func (*Chatroom) Descriptor() ([]byte, []int) {
	return file_protofiles_chatroom_proto_rawDescGZIP(), []int{0}
}

func (x *Chatroom) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Chatroom) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CreateChatroomRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Users []string `protobuf:"bytes,2,rep,name=users,proto3" json:"users,omitempty"`
}

func (x *CreateChatroomRequest) Reset() {
	*x = CreateChatroomRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protofiles_chatroom_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateChatroomRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateChatroomRequest) ProtoMessage() {}

func (x *CreateChatroomRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protofiles_chatroom_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateChatroomRequest.ProtoReflect.Descriptor instead.
func (*CreateChatroomRequest) Descriptor() ([]byte, []int) {
	return file_protofiles_chatroom_proto_rawDescGZIP(), []int{1}
}

func (x *CreateChatroomRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateChatroomRequest) GetUsers() []string {
	if x != nil {
		return x.Users
	}
	return nil
}

type CreateChatroomResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	ID      string `protobuf:"bytes,2,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *CreateChatroomResponse) Reset() {
	*x = CreateChatroomResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protofiles_chatroom_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateChatroomResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateChatroomResponse) ProtoMessage() {}

func (x *CreateChatroomResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protofiles_chatroom_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateChatroomResponse.ProtoReflect.Descriptor instead.
func (*CreateChatroomResponse) Descriptor() ([]byte, []int) {
	return file_protofiles_chatroom_proto_rawDescGZIP(), []int{2}
}

func (x *CreateChatroomResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CreateChatroomResponse) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type GetChatroomsByUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
}

func (x *GetChatroomsByUserRequest) Reset() {
	*x = GetChatroomsByUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protofiles_chatroom_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChatroomsByUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChatroomsByUserRequest) ProtoMessage() {}

func (x *GetChatroomsByUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protofiles_chatroom_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChatroomsByUserRequest.ProtoReflect.Descriptor instead.
func (*GetChatroomsByUserRequest) Descriptor() ([]byte, []int) {
	return file_protofiles_chatroom_proto_rawDescGZIP(), []int{3}
}

func (x *GetChatroomsByUserRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type GetChatroomsByUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success   bool        `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Chatrooms []*Chatroom `protobuf:"bytes,2,rep,name=chatrooms,proto3" json:"chatrooms,omitempty"`
}

func (x *GetChatroomsByUserResponse) Reset() {
	*x = GetChatroomsByUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protofiles_chatroom_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChatroomsByUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChatroomsByUserResponse) ProtoMessage() {}

func (x *GetChatroomsByUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protofiles_chatroom_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChatroomsByUserResponse.ProtoReflect.Descriptor instead.
func (*GetChatroomsByUserResponse) Descriptor() ([]byte, []int) {
	return file_protofiles_chatroom_proto_rawDescGZIP(), []int{4}
}

func (x *GetChatroomsByUserResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetChatroomsByUserResponse) GetChatrooms() []*Chatroom {
	if x != nil {
		return x.Chatrooms
	}
	return nil
}

var File_protofiles_chatroom_proto protoreflect.FileDescriptor

var file_protofiles_chatroom_proto_rawDesc = []byte{
	0x0a, 0x19, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2f, 0x63, 0x68, 0x61,
	0x74, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x63, 0x68, 0x61,
	0x74, 0x72, 0x6f, 0x6f, 0x6d, 0x22, 0x2e, 0x0a, 0x08, 0x43, 0x68, 0x61, 0x74, 0x72, 0x6f, 0x6f,
	0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x41, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x68, 0x61, 0x74, 0x72, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x22, 0x42, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x72, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x33, 0x0a, 0x19,
	0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x42, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x22, 0x68, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x72, 0x6f, 0x6f, 0x6d,
	0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x30, 0x0a, 0x09, 0x63, 0x68, 0x61,
	0x74, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63,
	0x68, 0x61, 0x74, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x72, 0x6f, 0x6f, 0x6d,
	0x52, 0x09, 0x63, 0x68, 0x61, 0x74, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x32, 0xcb, 0x01, 0x0a, 0x0f,
	0x43, 0x68, 0x61, 0x74, 0x72, 0x6f, 0x6f, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x55, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x72, 0x6f, 0x6f,
	0x6d, 0x12, 0x1f, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x72, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x20, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x72, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61,
	0x74, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x23, 0x2e, 0x63,
	0x68, 0x61, 0x74, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x72,
	0x6f, 0x6f, 0x6d, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x68, 0x61, 0x74, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x15, 0x5a, 0x13, 0x63, 0x68, 0x61,
	0x74, 0x72, 0x6f, 0x6f, 0x6d, 0x2f, 0x63, 0x68, 0x61, 0x74, 0x72, 0x6f, 0x6f, 0x6d, 0x70, 0x62,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protofiles_chatroom_proto_rawDescOnce sync.Once
	file_protofiles_chatroom_proto_rawDescData = file_protofiles_chatroom_proto_rawDesc
)

func file_protofiles_chatroom_proto_rawDescGZIP() []byte {
	file_protofiles_chatroom_proto_rawDescOnce.Do(func() {
		file_protofiles_chatroom_proto_rawDescData = protoimpl.X.CompressGZIP(file_protofiles_chatroom_proto_rawDescData)
	})
	return file_protofiles_chatroom_proto_rawDescData
}

var file_protofiles_chatroom_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_protofiles_chatroom_proto_goTypes = []interface{}{
	(*Chatroom)(nil),                   // 0: chatroom.Chatroom
	(*CreateChatroomRequest)(nil),      // 1: chatroom.CreateChatroomRequest
	(*CreateChatroomResponse)(nil),     // 2: chatroom.CreateChatroomResponse
	(*GetChatroomsByUserRequest)(nil),  // 3: chatroom.GetChatroomsByUserRequest
	(*GetChatroomsByUserResponse)(nil), // 4: chatroom.GetChatroomsByUserResponse
}
var file_protofiles_chatroom_proto_depIdxs = []int32{
	0, // 0: chatroom.GetChatroomsByUserResponse.chatrooms:type_name -> chatroom.Chatroom
	1, // 1: chatroom.ChatroomService.CreateChatroom:input_type -> chatroom.CreateChatroomRequest
	3, // 2: chatroom.ChatroomService.GetChatroomsByUser:input_type -> chatroom.GetChatroomsByUserRequest
	2, // 3: chatroom.ChatroomService.CreateChatroom:output_type -> chatroom.CreateChatroomResponse
	4, // 4: chatroom.ChatroomService.GetChatroomsByUser:output_type -> chatroom.GetChatroomsByUserResponse
	3, // [3:5] is the sub-list for method output_type
	1, // [1:3] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_protofiles_chatroom_proto_init() }
func file_protofiles_chatroom_proto_init() {
	if File_protofiles_chatroom_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protofiles_chatroom_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Chatroom); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protofiles_chatroom_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateChatroomRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protofiles_chatroom_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateChatroomResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protofiles_chatroom_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChatroomsByUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protofiles_chatroom_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChatroomsByUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protofiles_chatroom_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_protofiles_chatroom_proto_goTypes,
		DependencyIndexes: file_protofiles_chatroom_proto_depIdxs,
		MessageInfos:      file_protofiles_chatroom_proto_msgTypes,
	}.Build()
	File_protofiles_chatroom_proto = out.File
	file_protofiles_chatroom_proto_rawDesc = nil
	file_protofiles_chatroom_proto_goTypes = nil
	file_protofiles_chatroom_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ChatroomServiceClient is the client API for ChatroomService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChatroomServiceClient interface {
	CreateChatroom(ctx context.Context, in *CreateChatroomRequest, opts ...grpc.CallOption) (*CreateChatroomResponse, error)
	GetChatroomsByUser(ctx context.Context, in *GetChatroomsByUserRequest, opts ...grpc.CallOption) (*GetChatroomsByUserResponse, error)
}

type chatroomServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatroomServiceClient(cc grpc.ClientConnInterface) ChatroomServiceClient {
	return &chatroomServiceClient{cc}
}

func (c *chatroomServiceClient) CreateChatroom(ctx context.Context, in *CreateChatroomRequest, opts ...grpc.CallOption) (*CreateChatroomResponse, error) {
	out := new(CreateChatroomResponse)
	err := c.cc.Invoke(ctx, "/chatroom.ChatroomService/CreateChatroom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatroomServiceClient) GetChatroomsByUser(ctx context.Context, in *GetChatroomsByUserRequest, opts ...grpc.CallOption) (*GetChatroomsByUserResponse, error) {
	out := new(GetChatroomsByUserResponse)
	err := c.cc.Invoke(ctx, "/chatroom.ChatroomService/GetChatroomsByUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatroomServiceServer is the server API for ChatroomService service.
type ChatroomServiceServer interface {
	CreateChatroom(context.Context, *CreateChatroomRequest) (*CreateChatroomResponse, error)
	GetChatroomsByUser(context.Context, *GetChatroomsByUserRequest) (*GetChatroomsByUserResponse, error)
}

// UnimplementedChatroomServiceServer can be embedded to have forward compatible implementations.
type UnimplementedChatroomServiceServer struct {
}

func (*UnimplementedChatroomServiceServer) CreateChatroom(context.Context, *CreateChatroomRequest) (*CreateChatroomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChatroom not implemented")
}
func (*UnimplementedChatroomServiceServer) GetChatroomsByUser(context.Context, *GetChatroomsByUserRequest) (*GetChatroomsByUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChatroomsByUser not implemented")
}

func RegisterChatroomServiceServer(s *grpc.Server, srv ChatroomServiceServer) {
	s.RegisterService(&_ChatroomService_serviceDesc, srv)
}

func _ChatroomService_CreateChatroom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChatroomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatroomServiceServer).CreateChatroom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatroom.ChatroomService/CreateChatroom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatroomServiceServer).CreateChatroom(ctx, req.(*CreateChatroomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatroomService_GetChatroomsByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChatroomsByUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatroomServiceServer).GetChatroomsByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatroom.ChatroomService/GetChatroomsByUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatroomServiceServer).GetChatroomsByUser(ctx, req.(*GetChatroomsByUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ChatroomService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chatroom.ChatroomService",
	HandlerType: (*ChatroomServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateChatroom",
			Handler:    _ChatroomService_CreateChatroom_Handler,
		},
		{
			MethodName: "GetChatroomsByUser",
			Handler:    _ChatroomService_GetChatroomsByUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protofiles/chatroom.proto",
}
